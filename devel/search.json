[{"path":"https://pharmaverse.github.io/admiralophtha/devel/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/devel/LICENSE.html","id":"1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/LICENSE.html","id":"2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/LICENSE.html","id":"3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/LICENSE.html","id":"4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/LICENSE.html","id":"5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/LICENSE.html","id":"6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/LICENSE.html","id":"7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/LICENSE.html","id":"8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/LICENSE.html","id":"9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2021 F. Hoffmann-La Roche AG and GlaxoSmithKline LLC  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adbcva.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ADBCVA","text":"article describes creating ADBCVA ADaM Best-Corrected Visual Acuity (BCVA) data ophthalmology endpoints. used conjunction article creating BDS dataset SDTM. , derivations processes specific ADBCVA absent, user invited consult aforementioned article guidance. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adbcva.html","id":"dataset-contents","dir":"Articles","previous_headings":"Introduction","what":"Dataset Contents","title":"Creating ADBCVA","text":"name ADBCVA implies, admiralophtha suggests populate ADBCVA solely BCVA records OE SDTM.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adbcva.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Creating ADBCVA","text":"examples vignette require following packages.","code":"library(dplyr) library(admiral) library(admiral.test) library(admiraldev) library(admiralophtha)"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adbcva.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating ADBCVA","text":"Initial Set ADBCVA Deriving LogMAR score parameters Derivations Standard BDS Variables Deriving Analysis Value Categories Snellen Scores Deriving Criterion Flags BCVA Change Additional Notes Example Script","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adbcva.html","id":"setup","dir":"Articles","previous_headings":"Programming Workflow","what":"Initial set up of ADBCVA","title":"Creating ADBCVA","text":"BDS ADaM datasets, one start OE SDTM, BCVA records interest. purposes next two sections, shall using admiral OE ADSL test data. also require lookup table mapping parameter codes. Note: simulate ophthalmology study, add randomly generated STUDYEYE variable ADSL, practice STUDYEYE already derived using derive_var_studyeye. Following setup, programmer can start constructing ADBCVA. first step subset OE BCVA parameters merge ADSL. required two reasons: firstly, STUDYEYE crucial mapping PARAMCD’s. Secondly, treatment start date (TRTSDT) also prerequisite derivation variables Analysis Day (ADY). next item business derive AVAL, AVALU, DTYPE. example, due small number parameters derivation trivial. Moving forwards, PARAM PARAMCD can assigned using derive_vars_merged admiral lookup table param_lookup generated .","code":"data(\"admiral_oe\") data(\"admiral_adsl\")  # Add STUDYEYE to ADSL to simulate an ophtha dataset adsl <- admiral_adsl %>%   as.data.frame() %>%   mutate(STUDYEYE = sample(c(\"LEFT\", \"RIGHT\"), n(), replace = TRUE)) %>%   convert_blanks_to_na()  oe <- convert_blanks_to_na(admiral_oe) %>%   ungroup()  # ---- Lookup table ---- param_lookup <- tibble::tribble(   ~OETESTCD, ~OELAT, ~STUDYEYE, ~PARAMCD, ~PARAM, ~PARAMN,   \"VACSCORE\", \"RIGHT\", \"RIGHT\", \"SBCVA\", \"Study Eye Visual Acuity Score\", 1,   \"VACSCORE\", \"LEFT\", \"LEFT\", \"SBCVA\", \"Study Eye Visual Acuity Score\", 1,   \"VACSCORE\", \"RIGHT\", \"LEFT\", \"FBCVA\", \"Fellow Eye Visual Acuity Score\", 2,   \"VACSCORE\", \"LEFT\", \"RIGHT\", \"FBCVA\", \"Fellow Eye Visual Acuity Score\", 2 ) adsl_vars <- exprs(TRTSDT, TRTEDT, TRT01A, TRT01P, STUDYEYE)  adbcva <- oe %>%   filter(     OETESTCD %in% c(\"VACSCORE\")   ) %>%   derive_vars_merged(     dataset_add = adsl,     new_vars = adsl_vars,     by_vars = exprs(STUDYID, USUBJID)   ) adbcva <- adbcva %>%   mutate(     AVAL = OESTRESN,     AVALU = \"letters\",     DTYPE = NA_character_   ) adbcva <- adbcva %>%   derive_vars_merged(     dataset_add = param_lookup,     new_vars = exprs(PARAM, PARAMCD),     by_vars = exprs(OETESTCD, OELAT, STUDYEYE),     filter_add = PARAMCD %in% c(\"SBCVA\", \"FBCVA\")   )"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adbcva.html","id":"logmar","dir":"Articles","previous_headings":"Programming Workflow","what":"Deriving LogMAR score parameters","title":"Creating ADBCVA","text":"Often ADBCVA datasets contain derived records BCVA LogMAR units. can easily achieved follows using derive_param_computed. conversion units done using convert_etdrs_to_logmar. Two separate calls required due parameters split study fellow eye. extra parameters added, records end dataset now present, AVALC day/date variables ADY ADT can derived. Importantly, calls derive_param_computed list SDTM variables VISIT, VISITNUM, OEDY OEDTC by_vars function. necessary derive ADaM variables AVISIT ADY successive steps. ADaM variables require derived, SDTM variables set missing derived records, per ADaM standards:","code":"adbcva <- adbcva %>%   derive_param_computed(     by_vars = c(exprs(STUDYID, USUBJID, VISIT, VISITNUM, OEDY, OEDTC), adsl_vars),     parameters = c(\"SBCVA\"),     analysis_value = convert_etdrs_to_logmar(AVAL.SBCVA),     set_values_to = exprs(       PARAMCD = \"SBCVALOG\",       PARAM = \"Study Eye Visual Acuity LogMAR Score\",       DTYPE = \"DERIVED\",       AVALU = \"LogMAR\"     )   ) %>%   derive_param_computed(     by_vars = c(exprs(STUDYID, USUBJID, VISIT, OEDY, OEDTC), adsl_vars),     parameters = c(\"FBCVA\"),     analysis_value = convert_etdrs_to_logmar(AVAL.FBCVA),     set_values_to = exprs(       PARAMCD = \"FBCVALOG\",       PARAM = \"Fellow Eye Visual Acuity LogMAR Score\",       DTYPE = \"DERIVED\",       AVALU = \"LogMAR\"     )   ) %>%   mutate(AVALC = as.character(AVAL)) %>%   derive_vars_dt(     new_vars_prefix = \"A\",     dtc = OEDTC,     flag_imputation = \"none\"   ) %>%   derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT)) adbcva <- adbcva %>%   mutate(     VISIT = ifelse(PARAMCD %in% c(\"SBCVALOG\", \"FBCVALOG\"), NA_character_, VISIT),     VISITNUM = ifelse(PARAMCD %in% c(\"SBCVALOG\", \"FBCVALOG\"), NA, VISITNUM),     OEDY = ifelse(PARAMCD %in% c(\"SBCVALOG\", \"FBCVALOG\"), NA, OEDY),     OEDTC = ifelse(PARAMCD %in% c(\"SBCVALOG\", \"FBCVALOG\"), NA_character_, OEDTC)   )"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adbcva.html","id":"further","dir":"Articles","previous_headings":"Programming Workflow","what":"Further Derivations of Standard BDS Variables","title":"Creating ADBCVA","text":"user invited consult article creating BDS dataset SDTM learn add standard BDS variables ADBCVA. Henceforth, purposes article, following sections use ADBCVA dataset generated corresponding admiralophtha template program starting point. Note: dataset already comes criterion flags analysis value categorisation variables, illustration purposes removed.","code":"data(\"adbcva\")  adbcva <- adbcva %>%   select(-starts_with(\"CRIT\"), -starts_with(\"AVALCA\"))"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adbcva.html","id":"avalcats","dir":"Articles","previous_headings":"Programming Workflow","what":"Deriving Analysis Value Categories for Snellen Scores]","title":"Creating ADBCVA","text":"opthalmology studies may desire subdivide BCVA records according Snellen category fall (eg, 20/320, 20/100, 20/20 etc). best done use AVALCATx/AVALCAxN variable pairs. Currently, admiralophtha provide specific functionality create AVALCATx/AVALCAxN pairs, although may included future releases package. current toolset, suggested approach derive variables : Create lookup table assigns numeric equivalents (.e. AVALCAxN) Snellen categories. Create format function map AVAL numeric category. Add AVALCAxN mutate statement using format function. Add AVALCATx using derive_vars_merged combination lookup table. resulting output shown (limited first patient ):","code":"avalcat_lookup <- tibble::tribble(   ~PARAMCD, ~AVALCA1N, ~AVALCAT1,   \"SBCVA\", 1000, \"< 20/800\",   \"SBCVA\", 800, \"20/800\",   \"SBCVA\", 640, \"20/640\",   \"SBCVA\", 500, \"20/500\",   \"SBCVA\", 400, \"20/400\",   \"SBCVA\", 320, \"20/320\",   \"SBCVA\", 250, \"20/250\",   \"SBCVA\", 200, \"20/200\",   \"SBCVA\", 160, \"20/160\",   \"SBCVA\", 125, \"20/125\",   \"SBCVA\", 100, \"20/100\",   \"SBCVA\", 80, \"20/80\",   \"SBCVA\", 63, \"20/63\",   \"SBCVA\", 50, \"20/50\",   \"SBCVA\", 40, \"20/40\",   \"SBCVA\", 32, \"20/32\",   \"SBCVA\", 25, \"20/25\",   \"SBCVA\", 20, \"20/20\",   \"SBCVA\", 16, \"20/16\",   \"SBCVA\", 12, \"20/12\",   \"SBCVA\", 1, \"> 20/12\", )  avalcat_lookup <- avalcat_lookup %>%   mutate(PARAMCD = \"FBCVA\") %>%   rbind(avalcat_lookup)  format_avalcat1n <- function(param, aval) {   case_when(     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 0 & aval <= 3 ~ 1000,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 4 & aval <= 8 ~ 800,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 9 & aval <= 13 ~ 640,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 14 & aval <= 18 ~ 500,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 19 & aval <= 23 ~ 400,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 24 & aval <= 28 ~ 320,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 29 & aval <= 33 ~ 250,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 34 & aval <= 38 ~ 200,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 39 & aval <= 43 ~ 160,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 44 & aval <= 48 ~ 125,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 49 & aval <= 53 ~ 100,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 54 & aval <= 58 ~ 80,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 59 & aval <= 63 ~ 63,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 64 & aval <= 68 ~ 50,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 69 & aval <= 73 ~ 40,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 74 & aval <= 78 ~ 32,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 79 & aval <= 83 ~ 25,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 84 & aval <= 88 ~ 20,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 89 & aval <= 93 ~ 16,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 94 & aval <= 97 ~ 12,     param %in% c(\"SBCVA\", \"FBCVA\") & aval >= 98 ~ 1   ) }  adbcva <- adbcva %>%   mutate(AVALCA1N = format_avalcat1n(param = PARAMCD, aval = AVAL)) %>%   derive_vars_merged(     avalcat_lookup,     by = exprs(PARAMCD, AVALCA1N)   )"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adbcva.html","id":"critflags","dir":"Articles","previous_headings":"Programming Workflow","what":"Deriving Criterion Flags for BCVA Change","title":"Creating ADBCVA","text":"admiralophtha suggests use criterion flag variable pairs (CRITx/CRITxFL) program BCVA endpoints Avoiding loss x letters Gain y letters Gain x y letters (relative baseline basetypes). package provides function derive_var_bcvacritxfl program endpoints efficiently consistently. terms logic apply variable CHG, endpoints fall three classes, can represented inequalities: Class 1: CHG value lying inside range, <= CHG <= b. Class 2: CHG value upper limit, CHG <= . Class 3: CHG value lower limit, CHG => b. using derive_var_bcvacritxfl, ADaM programmer can implement three types endpoint . achieved feeding appropriate ranges, upper limits lower limits bcva_ranges, bcva_uplims bcva_lowlims arguments function. instance, let’s suppose endpoints interest : Gain 5 10 letters relative baseline (Class 1: 5 <= CHG <= 10) Gain 25 letters fewer relative baseline (Class 2: CHG <= 25) Loss 5 letters relative baseline (Class 2: CHG <= -5) Gain 15 letters relative baseline (Class 3: CHG >= 15) Loss 10 letters fewer relative baseline (Class 3: CHG >= -10). , following call implement criterion variable/flag pairs endpoints . CRITx variables automatically encode correct inequality. resulting output shown (limited first patient ): also possible assign significance “x” CRITxFL. instance, one designate criterion flags Class 1 CRIT1yFL, Class 2 CRIT2yFL, Class 3 CRIT3yFL. argument critxfl_index allows simple implementation conjunction three separate calls derive_var_bcvacritxfl:","code":"adbcva <- adbcva %>% derive_var_bcvacritxfl(   paramcds = c(\"SBCVA\", \"FBCVA\"),   bcva_ranges = list(c(5, 10)),   bcva_uplims = list(25, -5),   bcva_lowlims = list(15, -10) ) adbcva <- adbcva %>%   derive_var_bcvacritxfl(     paramcds = c(\"SBCVA\", \"FBCVA\"),     bcva_ranges = list(c(5, 10)),     critxfl_index = 10   ) %>%   derive_var_bcvacritxfl(     paramcds = c(\"SBCVA\", \"FBCVA\"),     bcva_uplims = list(25, -5),     critxfl_index = 20   ) %>%   derive_var_bcvacritxfl(     paramcds = c(\"SBCVA\", \"FBCVA\"),     bcva_lowlims = list(15, -10),     critxfl_index = 30   )"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adbcva.html","id":"additional-notes","dir":"Articles","previous_headings":"Programming Workflow","what":"Additional Notes","title":"Creating ADBCVA","text":"interpreting endpoints Loss 5 letters fewer relative baseline, implicitly assumed article also includes case letters gained, inequality reads CHG >= -5. One use bcva_lowlims = list(-5) argument derive_var_bcvacritxfl program endpoint. case, .e. one wishes exclude cases letter gains, inequality interest instead -5 <= CHG <= -1. Importantly, derive_var_bcvacritxfl still used, argument bcva_ranges = list(c(-5, -1)).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/admiralophtha.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get Started","text":"package extension, new admiral best place first start reading Get Started guide. extension package follows main idea conventions, re-uses many functions admiral, important thoroughly understand able use admiralophtha. article process written. Please use {admiralonco} “Get Started” page (commented moment) basis.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adoe.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ADOE","text":"article describes creating ADOE ADaM Ophthalmology Exam Analysis data ophthalmology endpoints. used conjunction article creating BDS dataset SDTM. , derivations processes specific ADOE absent, user invited consult aforementioned article guidance. current release admiralophtha contain functionality specific ADOE, article showcases map parameters OE order set basic structure ADOE. following steps, user invited consult -linked article BDS datasets. article updated future releases showcase explain admiralophtha-specific functionality. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adoe.html","id":"dataset-contents","dir":"Articles","previous_headings":"Introduction","what":"Dataset Contents","title":"Creating ADOE","text":"admiralophtha suggests populate ADOE general miscellaneous ophthalmology parameters. efficacy endpoint-related parameters (eg. BCVA tests) placed separate datasets (eg. ADBCVA).","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adoe.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Creating ADOE","text":"examples vignette require following packages.","code":"library(dplyr) library(admiral) library(admiral.test) library(admiraldev) library(admiralophtha)"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adoe.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating ADOE","text":"Initial Set ADOE Derivations Standard BDS Variables Example Script","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adoe.html","id":"setup","dir":"Articles","previous_headings":"Programming Workflow","what":"Initial set up of ADOE","title":"Creating ADOE","text":"BDS ADaM datasets, one start OE SDTM, general ophthalmology records interest. purposes next two sections, shall using admiral OE ADSL test data. also require lookup table mapping parameter codes. Note: simulate ophthalmology study, add randomly generated STUDYEYE variable ADSL, practice STUDYEYE already derived using derive_var_studyeye. Following setup, programmer can start constructing ADOE. first step subset OE general ophthalmology parameters. , one can merge resulting dataset ADSL. required two reasons: firstly, STUDYEYE crucial mapping PARAMCD’s. Secondly, treatment start date (TRTSDT) also prerequisite derivation variables Analysis Day (ADY).","code":"data(\"admiral_oe\") data(\"admiral_adsl\")  # Add STUDYEYE to ADSL to simulate an ophtha dataset adsl <- admiral_adsl %>%   as.data.frame() %>%   mutate(STUDYEYE = sample(c(\"LEFT\", \"RIGHT\"), n(), replace = TRUE)) %>%   convert_blanks_to_na()  oe <- convert_blanks_to_na(admiral_oe) %>%   ungroup()  # ---- Lookup table ----  # Assign PARAMCD, PARAM, and PARAMN param_lookup <- tibble::tribble(   ~OETESTCD, ~OELAT, ~STUDYEYE, ~PARAMCD, ~PARAM, ~PARAMN,   \"CSUBTH\", \"RIGHT\", \"RIGHT\", \"SCSUBTH\", \"Study Eye Center Subfield Thickness\", 1,   \"CSUBTH\", \"LEFT\", \"LEFT\", \"SCSUBTH\", \"Study Eye Center Subfield Thickness\", 1,   \"CSUBTH\", \"RIGHT\", \"LEFT\", \"FBCVA\", \"Fellow Eye Center Subfield Thickness\", 2,   \"CSUBTH\", \"LEFT\", \"RIGHT\", \"FBCVA\", \"Fellow Eye Center Subfield Thickness\", 2,   \"DRSSR\", \"RIGHT\", \"RIGHT\", \"SDRSSR\", \"Study Eye Diabetic Retinopathy Severity\", 3,   \"DRSSR\", \"LEFT\", \"LEFT\", \"SDRSSR\", \"Study Eye Diabetic Retinopathy Severity\", 3,   \"DRSSR\", \"RIGHT\", \"LEFT\", \"FDRSSR\", \"Fellow Eye Diabetic Retinopathy Severity\", 4,   \"DRSSR\", \"LEFT\", \"RIGHT\", \"FDRSSR\", \"Fellow Eye Diabetic Retinopathy Severity\", 4 ) adsl_vars <- exprs(TRTSDT, TRTEDT, TRT01A, TRT01P, STUDYEYE)  adoe <- oe %>%   filter(     OETESTCD %in% c(\"CSUBTH\", \"DRSSR\")   ) %>%   derive_vars_merged(     dataset_add = adsl,     new_vars = adsl_vars,     by_vars = exprs(STUDYID, USUBJID)   )"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adoe.html","id":"further","dir":"Articles","previous_headings":"Programming Workflow","what":"Further Derivations of Standard BDS Variables","title":"Creating ADOE","text":"user invited consult article creating BDS dataset SDTM learn add standard BDS variables ADOE.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/advfq.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ADVFQ","text":"article describes creating ADVFQ ADaM Visual Functioning Questionnaire data ophthalmology endpoints. Note: examples assume CDISC SDTM /ADaM format input unless otherwise specified.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/advfq.html","id":"required-packages","dir":"Articles","previous_headings":"Introduction","what":"Required Packages","title":"Creating ADVFQ","text":"examples vignette require following packages.","code":"library(admiral) library(admiral.test)"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/advfq.html","id":"programming-workflow","dir":"Articles","previous_headings":"","what":"Programming Workflow","title":"Creating ADVFQ","text":"Read Data Derive Dates (ADT ADY) Define Parameters lookup table Derive Analysis Value existing questions (AVAL) Derive Parameters recoded items summary scores Derive Analysis Visit (AVISIT) Derive Baseline variables (ABLFL BASE CHG PCHG) Derive Analysis Variables (ANL01FL ASEQ) Add ADSL Variables Example Script","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/advfq.html","id":"readdata","dir":"Articles","previous_headings":"Programming Workflow","what":"Read in Data","title":"Creating ADVFQ","text":"start, datasets needed creation questionnaire dataset read environment. company specific process. example purpose, ADaM datasets—included admiral admiralophtha—used.","code":"data(\"admiral_adsl\") data(\"admiral_qs\") adsl <- admiral_adsl qs <- admiral_qs"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/advfq.html","id":"dates","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Dates","title":"Creating ADVFQ","text":"derive date variables ADT, ADY, … admiral::derive_vars_dt() function admiral::derive_vars_dy() function can used. function allows user impute date well.","code":"qs <- qs %>% filter(QSTESTCD %in% c(\"VFQ1\", \"VFQ2\", \"VFQ3\", \"VFQ4\"))  adsl_vars <- exprs(TRTSDT, TRTEDT, TRT01A, TRT01P)  advfq <- derive_vars_merged(   qs,   dataset_add = adsl,   new_vars = adsl_vars,   by_vars = exprs(STUDYID, USUBJID) ) %>%   ## Calculate ADT, ADY ----   derive_vars_dt(     new_vars_prefix = \"A\",     dtc = QSDTC   ) %>%   derive_vars_dy(reference_date = TRTSDT, source_vars = exprs(ADT))"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/advfq.html","id":"parameters1","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Parameters in lookup table","title":"Creating ADVFQ","text":"Create parameter lookup table includes QSTESTCD, PARAMCD, PARAM, PARCAT1 PARCAT2. include parameters needed final ADVFQ. used later merge Parameter information.","code":"param_lookup <- tibble::tribble(   ~QSTESTCD, ~PARAMCD, ~PARAM, ~PARCAT1, ~PARCAT2,   \"VFQ1\", \"VFQ1\", \"Overall Health\", \"NEI VFQ-25\", \"Original Response\",   \"VFQ2\", \"VFQ2\", \"Eyesight in Both Eyes\", \"NEI VFQ-25\", \"Original Response\",   \"VFQ3\", \"VFQ3\", \"Worry About Eyesight\", \"NEI VFQ-25\", \"Original Response\",   \"VFQ4\", \"VFQ4\", \"Pain in and Around Eyes\", \"NEI VFQ-25\", \"Original Response\",   \"QR01\", \"QR01\", \"Recoded Item - 01\", \"NEI VFQ-25\", \"General 01\",   \"QR02\", \"QR02\", \"Recoded Item - 02\", \"NEI VFQ-25\", \"General 01\",   \"QR03\", \"QR03\", \"Recoded Item - 03\", \"NEI VFQ-25\", \"General 02\",   \"QR04\", \"QR04\", \"Recoded Item - 04\", \"NEI VFQ-25\", \"General 02\",   \"QSG01\", \"QSG01\", \"General Score 01\", \"NEI VFQ-25\", \"Averaged Result\",   \"QSG02\", \"QSG02\", \"General Score 02\", \"NEI VFQ-25\", \"Averaged Result\",   \"QBCSCORE\", \"QBCSCORE\", \"Composite Score\", \"NEI VFQ-25\", \"Averaged Result\" )"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/advfq.html","id":"aval","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Analysis Value for existing questions","title":"Creating ADVFQ","text":"derive analysis values use function admiral::derive_vars_merged_lookup() merges PARAMCD Parameter lookup table. merges parameter QSTESCD assigns AVAL AVALC.","code":"advfq <- advfq %>%   ## Add PARAMCD only - add PARAM etc later ----   derive_vars_merged_lookup(     dataset_add = param_lookup,     new_vars = exprs(PARAMCD),     by_vars = exprs(QSTESTCD)   ) %>%   ## Calculate AVAL and AVALC ----   mutate(     AVAL = QSSTRESN,     AVALC = QSORRES   )"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/advfq.html","id":"parameters","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Parameters for recoded items and summary scores","title":"Creating ADVFQ","text":"Creates new parameters new records recoded existing parameters. Run section code every question need recoding. gives example recoding one question. create summary records average recoded questions. example uses two recoded questions.","code":"## QR01 Recoded Item 01 # set to 100 if [advfq.AVAL] = 1 # else set to 75 if [advfq.AVAL] = 2 # else set to 50 if [advfq.AVAL] = 3 # else set to 25 if [advfq.AVAL] = 4 # else set to 0 if [advfq.AVAL] = 5 advfq <- advfq %>%   derive_summary_records(     by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars, PARAMCD, VISITNUM, VISIT, ADT, ADY),     filter = QSTESTCD == \"VFQ1\" & !is.na(AVAL),     analysis_var = AVAL,     summary_fun = identity,     set_values_to = exprs(PARAMCD = \"QR01\")   ) %>%   mutate(AVAL = ifelse(PARAMCD == \"QR01\",     case_when(       AVAL == 1 ~ 100,       AVAL == 2 ~ 75,       AVAL == 3 ~ 50,       AVAL == 4 ~ 25,       AVAL >= 5 ~ 0     ),     AVAL   )) ## Derive a new record as a summary record  ---- ## QSG01 General Score 01 # Average of QR01 and QR02 records advfq <- advfq %>%   derive_summary_records(     by_vars = exprs(STUDYID, USUBJID, !!!adsl_vars, VISITNUM, VISIT, ADT, ADY),     filter = PARAMCD %in% c(\"QR01\", \"QR02\") & !is.na(AVAL),     analysis_var = AVAL,     summary_fun = mean,     set_values_to = exprs(PARAMCD = \"QSG01\")   )"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/advfq.html","id":"avisit","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Analysis Visit","title":"Creating ADVFQ","text":"Derives AVISIT AVISITN based VISIT. See also Visit Period Variables vignette.","code":"advfq <- advfq %>%   # Derive Timing   mutate(     AVISIT = case_when(       str_detect(VISIT, \"SCREEN|UNSCHED|RETRIEVAL|AMBUL\") ~ NA_character_,       # If VISIT=DAY 1 then set to Baseline, study specific       str_detect(VISIT, \"DAY 1\") ~ \"Baseline\",       !is.na(VISIT) ~ str_to_title(VISIT),       TRUE ~ NA_character_     ),     AVISITN = as.numeric(case_when(       VISIT == \"BASELINE\" ~ \"0\",       str_detect(VISIT, \"WEEK\") ~ str_trim(str_replace(VISIT, \"WEEK\", \"\")),       TRUE ~ NA_character_     ))   )"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/advfq.html","id":"baseline","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Baseline variables","title":"Creating ADVFQ","text":"derive ABLFL, BASE, CHG PCHG variables.","code":"## Derive baseline flags ---- advfq <- advfq %>%   # Calculate ABLFL   restrict_derivation(     derivation = derive_var_extreme_flag,     args = params(       by_vars = exprs(STUDYID, USUBJID, PARAMCD),       order = exprs(ADT, VISITNUM, QSSEQ),       new_var = ABLFL,       mode = \"last\"     ),     filter = (!is.na(AVAL) &       ADT <= TRTSDT)   )  ## Derive baseline information ---- advfq <- advfq %>%   # Calculate BASE   derive_var_base(     by_vars = exprs(STUDYID, USUBJID, PARAMCD),     source_var = AVAL,     new_var = BASE   ) %>%   # Calculate CHG   derive_var_chg() %>%   # Calculate PCHG   derive_var_pchg()"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/advfq.html","id":"analysis","dir":"Articles","previous_headings":"Programming Workflow","what":"Derive Analysis Variables","title":"Creating ADVFQ","text":"finding ADaMs, analysis flag derived identify appropriate observation(s) use particular analysis subject multiple observations within particular timing period. situation, analysis flag (e.g. ANLxxFL) may used choose appropriate record analysis. flag may derived using admiral function admiral::derive_var_extreme_flag(). example, assume like choose latest value USUBJID, PARAMCD AVISIT. derive ASEQ using admiral::derive_var_obs_number() based observation number within dataset, additionally merge PARAM, PARCAT1 PARCAT2 using earlier lookup table.","code":"## ANL01FL: Flag last result within an AVISIT for post-baseline records ---- advfq <- advfq %>%   restrict_derivation(     derivation = derive_var_extreme_flag,     args = params(       new_var = ANL01FL,       by_vars = exprs(USUBJID, PARAMCD, AVISIT),       order = exprs(ADT, AVAL),       mode = \"last\"     ),     filter = !is.na(AVISITN) & ONTRTFL == \"Y\"   ) ## Get ASEQ and PARAM  ---- advfq <- advfq %>%   # Calculate ASEQ   derive_var_obs_number(     new_var = ASEQ,     by_vars = exprs(STUDYID, USUBJID),     order = exprs(PARAMCD, ADT, AVISITN, VISITNUM),     check_type = \"error\"   ) %>%   # Derive PARAM   derive_vars_merged(dataset_add = select(param_lookup, -QSTESTCD), by_vars = exprs(PARAMCD))"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/advfq.html","id":"adslvars","dir":"Articles","previous_headings":"Programming Workflow","what":"Add ADSL Variables","title":"Creating ADVFQ","text":"Variables ADSL required.","code":"# Add all ADSL variables advfq <- advfq %>%   derive_vars_merged(     dataset_add = select(adsl, !!!negate_vars(adsl_vars)),     by_vars = exprs(STUDYID, USUBJID)   )"},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/devel/articles/adxx.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Creating ADXX","text":"article describes creating ADXX ADaM.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edoardo Mancini. Author, maintainer. Gordon Miller. Author. Lucy Palmen. Author. Rachel Linacre. Author.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mancini E, Miller G, Palmen L, Linacre R (2023). admiralophtha: ADaM R Asset Library - Ophthalmology. https://pharmaverse.github.io/admiralophtha, https://github.com/pharmaverse/admiralophtha.","code":"@Manual{,   title = {admiralophtha: ADaM in R Asset Library - Ophthalmology},   author = {Edoardo Mancini and Gordon Miller and Lucy Palmen and Rachel Linacre},   year = {2023},   note = {https://pharmaverse.github.io/admiralophtha, https://github.com/pharmaverse/admiralophtha}, }"},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/devel/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"ADaM in R Asset Library - Ophthalmology","text":"provide complementary (admiral) toolbox enables users develop ophthalmology disease area specifics.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"ADaM in R Asset Library - Ophthalmology","text":"install latest development version package directly GitHub use following code:","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") } remotes::install_github(\"pharmaverse/admiraloptha\", ref = \"devel\")"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/index.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"ADaM in R Asset Library - Ophthalmology","text":"Build toolbox re-usable functions utilities create Ophthalmology-specific ADaM datasets R modular manner. functions created based upon ADaM Implementation Guide aim facilitate programming ADaM dataset standards.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/index.html","id":"expectations","dir":"","previous_headings":"","what":"Expectations","title":"ADaM in R Asset Library - Ophthalmology","text":"admiralophtha expected complement admiral provide functions help creation endpoints required ophthalmology ADaMs.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/index.html","id":"references-and-documentation","dir":"","previous_headings":"","what":"References and Documentation","title":"ADaM in R Asset Library - Ophthalmology","text":"Please refer {admiral} References Documentation.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/index.html","id":"r-versions","dir":"","previous_headings":"","what":"R Versions","title":"ADaM in R Asset Library - Ophthalmology","text":"’s summary strategy package related R versions: R versions developers users follow admiral core package. development devel branch admiral core used dependency. releasing new admiralophtha version must run using latest released admiral core version, .e., main branch admiral core.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"ADaM in R Asset Library - Ophthalmology","text":"use following support communications user developer community: Slack - informal discussions, Q&building user community. don’t access, use link join pharmaverse Slack workspace GitHub Issues - direct feedback, enhancement requests raising bugs","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/index.html","id":"release-schedule","dir":"","previous_headings":"","what":"Release Schedule","title":"ADaM in R Asset Library - Ophthalmology","text":"decided","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/adbcva.html","id":null,"dir":"Reference","previous_headings":"","what":"Best Corrected Visual Acuity Analysis Dataset — adbcva","title":"Best Corrected Visual Acuity Analysis Dataset — adbcva","text":"example Best Corrected Visual Acuity (BCVA) analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/adbcva.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Best Corrected Visual Acuity Analysis Dataset — adbcva","text":"","code":"adbcva"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/adbcva.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Best Corrected Visual Acuity Analysis Dataset — adbcva","text":"object class tbl_df (inherits tbl, data.frame) 7672 rows 115 columns.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/adbcva.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Best Corrected Visual Acuity Analysis Dataset — adbcva","text":"Derived oe ADSL datasets using {admiral, {admiralophtha} (https://github.com/pharmaverse/admiralophtha/blob/main/inst/templates/ad_adbcva.R)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/admiralophtha-package.html","id":null,"dir":"Reference","previous_headings":"","what":"admiralophtha: ADaM in R Asset Library - Ophthalmology — admiralophtha-package","title":"admiralophtha: ADaM in R Asset Library - Ophthalmology — admiralophtha-package","text":"toolbox programming Clinical Data Standards Interchange Consortium (CDISC) compliant Analysis Data Model (ADaM) datasets R. ADaM datasets mandatory part New Drug Biologics License Application submitted United States Food Drug Administration (FDA). Analysis derivations implemented accordance \"Analysis Data Model Implementation Guide\" (CDISC Analysis Data Model Team, 2021, https://www.cdisc.org/standards/foundational/adam/adamig-v1-3-release-package).","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/admiralophtha-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"admiralophtha: ADaM in R Asset Library - Ophthalmology — admiralophtha-package","text":"Maintainer: Edoardo Mancini edoardo.mancini@roche.com Authors: Gordon Miller gordon.miller@roche.com Lucy Palmen Rachel Linacre","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/adoe.html","id":null,"dir":"Reference","previous_headings":"","what":"Ophthalmology Exam Analysis Dataset — adoe","title":"Ophthalmology Exam Analysis Dataset — adoe","text":"example Ophthalmology Exam Analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/adoe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ophthalmology Exam Analysis Dataset — adoe","text":"","code":"adoe"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/adoe.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ophthalmology Exam Analysis Dataset — adoe","text":"object class tbl_df (inherits tbl, data.frame) 7672 rows 97 columns.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/adoe.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Ophthalmology Exam Analysis Dataset — adoe","text":"Derived oe ADSL datasets using {admiral, {admiralophtha} (https://github.com/pharmaverse/admiralophtha/blob/main/inst/templates/ad_adoe.R)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/advfq.html","id":null,"dir":"Reference","previous_headings":"","what":"Visual Function Questionnaire Analysis Dataset — advfq","title":"Visual Function Questionnaire Analysis Dataset — advfq","text":"example Visual Function Questionnaire (VFQ) analysis dataset","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/advfq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visual Function Questionnaire Analysis Dataset — advfq","text":"","code":"advfq"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/advfq.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Visual Function Questionnaire Analysis Dataset — advfq","text":"object class tbl_df (inherits tbl, data.frame) 0 rows 85 columns.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/advfq.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Visual Function Questionnaire Analysis Dataset — advfq","text":"Derived ADSL qs datasets using {admiral, {admiralophtha} (https://github.com/pharmaverse/admiralophtha/blob/main/inst/templates/ad_advfq.R)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/convert_etdrs_to_logmar.html","id":null,"dir":"Reference","previous_headings":"","what":"ETDRS --> LogMAR conversion — convert_etdrs_to_logmar","title":"ETDRS --> LogMAR conversion — convert_etdrs_to_logmar","text":"Convert ETDRS score LogMAR units","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/convert_etdrs_to_logmar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ETDRS --> LogMAR conversion — convert_etdrs_to_logmar","text":"","code":"convert_etdrs_to_logmar(value)"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/convert_etdrs_to_logmar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ETDRS --> LogMAR conversion — convert_etdrs_to_logmar","text":"value object containing ETDRS score convert logMAR","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/convert_etdrs_to_logmar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ETDRS --> LogMAR conversion — convert_etdrs_to_logmar","text":"input value converted converted logMAR units","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/convert_etdrs_to_logmar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ETDRS --> LogMAR conversion — convert_etdrs_to_logmar","text":"ETDRS value converted logMAR logMAR = -0.02 * ETDRS + 1.7","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/convert_etdrs_to_logmar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ETDRS --> LogMAR conversion — convert_etdrs_to_logmar","text":"Rachel Linacre","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/convert_etdrs_to_logmar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ETDRS --> LogMAR conversion — convert_etdrs_to_logmar","text":"","code":"library(tibble) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(admiral) #>  #> Attaching package: ‘admiral’ #> The following object is masked from ‘package:dplyr’: #>  #>     vars library(admiraldev) #>  #> Attaching package: ‘admiraldev’ #> The following objects are masked from ‘package:dplyr’: #>  #>     anti_join, filter_if, inner_join, left_join  adbcva <- tribble(   ~STUDYID, ~USUBJID, ~AVAL,   \"XXX001\", \"P01\", 5,   \"XXX001\", \"P02\", 10,   \"XXX001\", \"P03\", 15,   \"XXX001\", \"P04\", 20,   \"XXX001\", \"P05\", 25 )  adbcva <- adbcva %>% mutate(AVAL = convert_etdrs_to_logmar(AVAL))"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/convert_logmar_to_etdrs.html","id":null,"dir":"Reference","previous_headings":"","what":"LogMAR --> ETDRS conversion — convert_logmar_to_etdrs","title":"LogMAR --> ETDRS conversion — convert_logmar_to_etdrs","text":"Convert LogMAR score ETDRS units","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/convert_logmar_to_etdrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LogMAR --> ETDRS conversion — convert_logmar_to_etdrs","text":"","code":"convert_logmar_to_etdrs(value)"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/convert_logmar_to_etdrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LogMAR --> ETDRS conversion — convert_logmar_to_etdrs","text":"value object containing logMAR score convert ETDRS","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/convert_logmar_to_etdrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LogMAR --> ETDRS conversion — convert_logmar_to_etdrs","text":"input value converted ETDRS units","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/convert_logmar_to_etdrs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LogMAR --> ETDRS conversion — convert_logmar_to_etdrs","text":"logMAR value converted ETDRS ETDRS = -(logMAR - 1.7) / 0.02","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/convert_logmar_to_etdrs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"LogMAR --> ETDRS conversion — convert_logmar_to_etdrs","text":"Nandini R Thampi","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/convert_logmar_to_etdrs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LogMAR --> ETDRS conversion — convert_logmar_to_etdrs","text":"","code":"library(tibble) library(dplyr) library(admiral)  oe <- tribble(   ~STUDYID, ~USUBJID, ~OETESTCD, ~OEMETHOD, ~OESTRESN,   \"XXX001\", \"P01\", \"VACSCORE\", \"logMAR EYE CHART\", 1.08,   \"XXX001\", \"P02\", \"VACSCORE\", \"logMAR EYE CHART\", 1.66,   \"XXX001\", \"P03\", \"VACSCORE\", \"logMAR EYE CHART\", 1.60,   \"XXX001\", \"P04\", \"VACSCORE\", \"ETDRS EYE CHART\", 57,   \"XXX001\", \"P05\", \"VACSCORE\", \"ETDRS EYE CHART\", 1 )  adbcva <- oe %>%   filter(OETESTCD == \"VACSCORE\" & toupper(OEMETHOD) == \"LOGMAR EYE CHART\") %>%   mutate(OESTRESN = convert_logmar_to_etdrs(OESTRESN))"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_afeye.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Affected Eye — derive_var_afeye","title":"Derive Affected Eye — derive_var_afeye","text":"Derive Affected Eye (AFEYE) occurrence datasets","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_afeye.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Affected Eye — derive_var_afeye","text":"","code":"derive_var_afeye(dataset_occ, loc_var, lat_var)"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_afeye.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Affected Eye — derive_var_afeye","text":"dataset_occ Input Occurence dataset loc_var Location variable lat_var Laterality variable","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_afeye.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Affected Eye — derive_var_afeye","text":"input occurrence dataset Affected Eye (AFEYE) added.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_afeye.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Affected Eye — derive_var_afeye","text":"Affected Eye derived occurrence dataset using laterality Study Eye. assumes Study Eye already added ADSL.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_afeye.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Derive Affected Eye — derive_var_afeye","text":"Lucy Palmen","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_afeye.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Affected Eye — derive_var_afeye","text":"","code":"library(tibble) library(admiral)  adae <- tribble(   ~STUDYID, ~USUBJID, ~STUDYEYE, ~AELOC, ~AELAT,   \"XXX001\", \"P01\", \"RIGHT\", \"EYE\", \"RIGHT\",   \"XXX001\", \"P01\", \"RIGHT\", \"EYE\", \"LEFT\",   \"XXX001\", \"P02\", \"LEFT\", \"\", \"\",   \"XXX001\", \"P02\", \"LEFT\", \"EYE\", \"LEFT\",   \"XXX001\", \"P04\", \"BILATERAL\", \"EYE\", \"RIGHT\",   \"XXX001\", \"P05\", \"RIGHT\", \"EYE\", \"RIGHT\" )  derive_var_afeye(adae, AELOC, AELAT) #> # A tibble: 6 x 6 #>   STUDYID USUBJID STUDYEYE  AELOC AELAT   AFEYE        #>   <chr>   <chr>   <chr>     <chr> <chr>   <chr>        #> 1 XXX001  P01     RIGHT     \"EYE\" \"RIGHT\" \"Study Eye\"  #> 2 XXX001  P01     RIGHT     \"EYE\" \"LEFT\"  \"Fellow Eye\" #> 3 XXX001  P02     LEFT      \"\"    \"\"      \"\"           #> 4 XXX001  P02     LEFT      \"EYE\" \"LEFT\"  \"Study Eye\"  #> 5 XXX001  P04     BILATERAL \"EYE\" \"RIGHT\" \"Study Eye\"  #> 6 XXX001  P05     RIGHT     \"EYE\" \"RIGHT\" \"Study Eye\""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_bcvacritxfl.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds CRITx CRITxFL pairs to ADBCVA dataset — derive_var_bcvacritxfl","title":"Adds CRITx CRITxFL pairs to ADBCVA dataset — derive_var_bcvacritxfl","text":"Adds criterion variables CRITx corresponding flags CRITxFL ADBCVA dataset.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_bcvacritxfl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds CRITx CRITxFL pairs to ADBCVA dataset — derive_var_bcvacritxfl","text":"","code":"derive_var_bcvacritxfl(   dataset_adbcva,   paramcds = NULL,   basetype = NULL,   bcva_ranges = NULL,   bcva_uplims = NULL,   bcva_lowlims = NULL,   additional_text = \"\",   critxfl_index = NULL )"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_bcvacritxfl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds CRITx CRITxFL pairs to ADBCVA dataset — derive_var_bcvacritxfl","text":"dataset_adbcva Input dataset (ADBCVA). paramcds Vector PARAMCD values derive CRITx CRITxFL. basetype BASETYPE value derive CRITx CRITxFL. bcva_ranges List containing one numeric vectors length 2. vector c(,b) bcva_ranges, pair variables CRITx, CRITxFL created condition: <= CHG <= b. criterion flags type required, leave NULL. bcva_uplims List containing one numeric elements. element bcva_uplims, pair variables CRITx, CRITxFL created condition: CHG <= . criterion flags type required, leave NULL. bcva_lowlims List containing one numeric elements. element b bcva_lowlims, pair variables CRITx, CRITxFL created condition: CHG >= b. criterion flags type required, leave NULL. additional_text string containing additional text append CRITx critxfl_index positive integer detailing first value x use \"CRITxFL\". supplied, function takes first available value x, counting x = 1.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_bcvacritxfl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds CRITx CRITxFL pairs to ADBCVA dataset — derive_var_bcvacritxfl","text":"input ADBCVA dataset additional column pairsCRITx, CRITxFL.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_bcvacritxfl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds CRITx CRITxFL pairs to ADBCVA dataset — derive_var_bcvacritxfl","text":"function works calling derive_var_bcvacritxflonce elements bcva_ranges, bcva_uplims bcva_lowlims. NOTE: CHG equal NA, resulting criterion flag also marked NA.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_bcvacritxfl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds CRITx CRITxFL pairs to ADBCVA dataset — derive_var_bcvacritxfl","text":"Edoardo Mancini","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_bcvacritxfl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds CRITx CRITxFL pairs to ADBCVA dataset — derive_var_bcvacritxfl","text":"","code":"library(tibble) library(admiral) library(admiraldev)  adbcva1 <- tribble(   ~STUDYID, ~USUBJID, ~BASETYPE, ~PARAMCD, ~CHG,   \"XXX001\", \"P01\", \"LAST\", \"SBCVA\", 0,   \"XXX001\", \"P01\", \"LAST\", \"FBCVA\", 2,   \"XXX001\", \"P01\", \"LAST\", \"SBCVALOG\", -7,   \"XXX001\", \"P02\", \"LAST\", \"SBCVA\", -13,   \"XXX001\", \"P02\", \"LAST\", \"FBCVA\", 5,   \"XXX001\", \"P02\", \"LAST\", \"SBCVALOG\", 12,   \"XXX001\", \"P03\", \"LAST\", \"SBCVA\", NA,   \"XXX001\", \"P03\", \"LAST\", \"FBCVA\", 17 )  derive_var_bcvacritxfl(   dataset_adbcva = adbcva1,   paramcds = c(\"SBCVA\", \"FBCVA\"),   basetype = NULL,   bcva_ranges = list(c(0, 5), c(-5, -1), c(10, 15)),   bcva_uplims = list(5, 10),   bcva_lowlims = list(8),   additional_text = \"\" ) #> # A tibble: 8 x 17 #>   STUDYID USUBJID BASETYPE PARAMCD    CHG CRIT1  CRIT1FL CRIT2   CRIT2FL CRIT3   #>   <chr>   <chr>   <chr>    <chr>    <dbl> <chr>  <chr>   <chr>   <chr>   <chr>   #> 1 XXX001  P01     LAST     SBCVA        0 0 <= … Y       -5 <= … N       10 <= … #> 2 XXX001  P01     LAST     FBCVA        2 0 <= … Y       -5 <= … N       10 <= … #> 3 XXX001  P02     LAST     SBCVA      -13 0 <= … N       -5 <= … N       10 <= … #> 4 XXX001  P02     LAST     FBCVA        5 0 <= … Y       -5 <= … N       10 <= … #> 5 XXX001  P03     LAST     SBCVA       NA 0 <= … NA      -5 <= … NA      10 <= … #> 6 XXX001  P03     LAST     FBCVA       17 0 <= … N       -5 <= … N       10 <= … #> 7 XXX001  P01     LAST     SBCVALOG    -7 NA     NA      NA      NA      NA      #> 8 XXX001  P02     LAST     SBCVALOG    12 NA     NA      NA      NA      NA      #> # … with 7 more variables: CRIT3FL <chr>, CRIT4 <chr>, CRIT4FL <chr>, #> #   CRIT5 <chr>, CRIT5FL <chr>, CRIT6 <chr>, CRIT6FL <chr>  adbcva2 <- tribble(   ~STUDYID, ~USUBJID, ~AVISIT, ~BASETYPE, ~PARAMCD, ~AVAL, ~CHG,   \"XXX001\", \"P01\", \"BASELINE\", \"LAST\", \"SBCVA\", 4, NA,   \"XXX001\", \"P01\", \"BASELINE\", \"LAST\", \"SBCVA\", 6, NA,   \"XXX001\", \"P01\", \"AVERAGE BASELINE\", \"AVERAGE\", \"SBCVA\", 5, NA,   \"XXX001\", \"P01\", \"WEEK 2\", \"LAST\", \"SBCVA\", -3, NA,   \"XXX001\", \"P01\", \"WEEK 4\", \"LAST\", \"SBCVA\", -10, NA,   \"XXX001\", \"P01\", \"WEEK 6\", \"LAST\", \"SBCVA\", 12, NA,   \"XXX001\", \"P01\", \"WEEK 2\", \"AVERAGE\", \"SBCVA\", -2, -7,   \"XXX001\", \"P01\", \"WEEK 4\", \"AVERAGE\", \"SBCVA\", 6, 1,   \"XXX001\", \"P01\", \"WEEK 6\", \"AVERAGE\", \"SBCVA\", 3, -2 )  derive_var_bcvacritxfl(   dataset_adbcva = adbcva2,   paramcds = c(\"SBCVA\", \"FBCVA\"),   basetype = \"AVERAGE\",   bcva_ranges = list(c(0, 5), c(-10, 0)),   bcva_lowlims = list(5),   additional_text = \" (AVERAGE)\" ) #> # A tibble: 9 x 13 #>   STUDYID USUBJID AVISIT   BASETYPE PARAMCD  AVAL   CHG CRIT1    CRIT1FL CRIT2   #>   <chr>   <chr>   <chr>    <chr>    <chr>   <dbl> <dbl> <chr>    <chr>   <chr>   #> 1 XXX001  P01     AVERAGE… AVERAGE  SBCVA       5    NA 0 <= CH… NA      -10 <=… #> 2 XXX001  P01     WEEK 2   AVERAGE  SBCVA      -2    -7 0 <= CH… N       -10 <=… #> 3 XXX001  P01     WEEK 4   AVERAGE  SBCVA       6     1 0 <= CH… Y       -10 <=… #> 4 XXX001  P01     WEEK 6   AVERAGE  SBCVA       3    -2 0 <= CH… N       -10 <=… #> 5 XXX001  P01     BASELINE LAST     SBCVA       4    NA NA       NA      NA      #> 6 XXX001  P01     BASELINE LAST     SBCVA       6    NA NA       NA      NA      #> 7 XXX001  P01     WEEK 2   LAST     SBCVA      -3    NA NA       NA      NA      #> 8 XXX001  P01     WEEK 4   LAST     SBCVA     -10    NA NA       NA      NA      #> 9 XXX001  P01     WEEK 6   LAST     SBCVA      12    NA NA       NA      NA      #> # … with 3 more variables: CRIT2FL <chr>, CRIT3 <chr>, CRIT3FL <chr>"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_bcvacritxfl_util.html","id":null,"dir":"Reference","previous_headings":"","what":"Add CRITx and CRITxFL pair to ADBCVA dataset — derive_var_bcvacritxfl_util","title":"Add CRITx and CRITxFL pair to ADBCVA dataset — derive_var_bcvacritxfl_util","text":"Helper function derive_var_bcvacritxfl adds criterion variable CRITx corresponding flag CRITxFL ADBCVA dataset.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_bcvacritxfl_util.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add CRITx and CRITxFL pair to ADBCVA dataset — derive_var_bcvacritxfl_util","text":"","code":"derive_var_bcvacritxfl_util(   dataset,   critx_text,   critxfl_cond,   counter,   bcva_range = NULL,   bcva_uplim = NULL,   bcva_lowlim = NULL )"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_bcvacritxfl_util.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add CRITx and CRITxFL pair to ADBCVA dataset — derive_var_bcvacritxfl_util","text":"dataset Input dataset (ADBCVA). critx_text String containing text CRITx variable. critxfl_cond String containing R code detailing criterion satisfied CRITxFL variable equal \"Y\". counter Integer detailing value x use \"CRITxFL\". bcva_range Numeric vector length two detailing lower upper change BCVA limits (bcva_range called critxfl_cond criterion stipulates change BCVA lie inside range). bcva_uplim Numeric value detailing highest change BCVA limit (bcva_uplim called critxfl_cond criterion stipulates change BCVA lie upper limit). bcva_lowlim Numeric value detailing lowest change BCVA limit (bcva_lowlim called critxfl_cond criterion stipulates change BCVA lie lower limit).","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_bcvacritxfl_util.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add CRITx and CRITxFL pair to ADBCVA dataset — derive_var_bcvacritxfl_util","text":"input ADBCVA dataset additional columns CRITx, CRITxFL.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_bcvacritxfl_util.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add CRITx and CRITxFL pair to ADBCVA dataset — derive_var_bcvacritxfl_util","text":"criterion change BCVA CRITxFL can three types: (1) value lies within range; <= CHG <= b; (2) value upper limit; CHG <= ; (3) value lower limit; b <= CHG. (1), bcva_range must specified function; (2), bcva_uplim; (3) bcva_lowlim. ever necessary supply one three arguments. NOTE: CHG equal NA, resulting criterion flag also marked NA.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_bcvacritxfl_util.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add CRITx and CRITxFL pair to ADBCVA dataset — derive_var_bcvacritxfl_util","text":"Edoardo Mancini","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_studyeye.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Study Eye — derive_var_studyeye","title":"Derive Study Eye — derive_var_studyeye","text":"Derive Study Eye (STUDYEYE) ADSL dataset","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_studyeye.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Study Eye — derive_var_studyeye","text":"","code":"derive_var_studyeye(dataset_adsl, dataset_sc, sctestcd_value = \"FOCID\")"},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_studyeye.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Study Eye — derive_var_studyeye","text":"dataset_adsl ADSL input dataset dataset_sc SC input dataset sctestcd_value SCTESTCD value flagging Study Eye selection records. Default: \"FOCID\".","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_studyeye.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Study Eye — derive_var_studyeye","text":"input ADSL dataset additional column named STUDYEYE","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_studyeye.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Derive Study Eye — derive_var_studyeye","text":"Study Eye derived ADSL using \"Study Eye selection\" records SC SDTM dataset.","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_studyeye.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Derive Study Eye — derive_var_studyeye","text":"Edoardo Mancini","code":""},{"path":"https://pharmaverse.github.io/admiralophtha/devel/reference/derive_var_studyeye.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Study Eye — derive_var_studyeye","text":"","code":"library(tibble) library(admiral)  adsl <- tribble(   ~STUDYID, ~USUBJID,   \"XXX001\", \"P01\",   \"XXX001\", \"P02\",   \"XXX001\", \"P03\",   \"XXX001\", \"P04\",   \"XXX001\", \"P05\" )  sc <- tribble(   ~STUDYID, ~USUBJID, ~SCTESTCD, ~SCSTRESC,   \"XXX001\", \"P01\", \"FOCID\", \"OS\",   \"XXX001\", \"P01\", \"ACOHORT\", \"COHORT1\",   \"XXX001\", \"P02\", \"FOCID\", \"OD\",   \"XXX001\", \"P02\", \"ACOHORT\", \"COHORT3\",   \"XXX001\", \"P04\", \"FOCID\", \"OU\",   \"XXX001\", \"P05\", \"FOCID\", \"OD\",   \"XXX001\", \"P06\", \"FOCID\", \"OS\" )  derive_var_studyeye(adsl, sc) #> # A tibble: 5 x 3 #>   STUDYID USUBJID STUDYEYE    #>   <chr>   <chr>   <chr>       #> 1 XXX001  P01     \"LEFT\"      #> 2 XXX001  P02     \"RIGHT\"     #> 3 XXX001  P03     \"\"          #> 4 XXX001  P04     \"BILATERAL\" #> 5 XXX001  P05     \"RIGHT\""}]
